
 // GGcode test file
let id = 2345

note {
  ╔═╗╔═╗┌─┐┌─┐┌┬┐┌─┐     File compiled : [ggcode_file_name]  
  ║ ╦║ ╦│  │ │ ││├┤      Timestamp : [time]  
  ╚═╝╚═╝└─┘└─┘─┴┘└─┘     Program ID: [id]  

  Rose Pattern - Polar Spiral with Petals
}

G90 G94 G17
G20
G53 G0 Z0
T1 M6
S6000 M3
G54
M8


note {Function Loop Test — Stress Scope + Reuse Safety}

let z_safe = 5
let z_cut = -1
let feed = 300
let round_eps = 0.0001
let v1 = 0
let v2 = 0
let v3 = 0
let v4 = 0
let v5 = 0
let v6 = 0
let v7 = 0

// === Define Test Functions ===

function f_add(a, b) { return a + b }
function f_sub(a, b) { return a - b }
function f_mul(a, b) { return a * b }
function f_div(a, b) { if (b == 0) { return 0 } return a / b }
function f_mix(a, b, t) { return a * (1 - t) + b * t }
function f_clamp(x) {
    if (x < 0) { return 0 }
    if (x > 100) { return 100 }
    return x
}
function f_nested(n) {
    return f_add(f_mul(n, 2), f_sub(n, 1))
}

// === Start ===
G0 Z[z_safe]
G0 X0 Y0
G1 Z[z_cut] F[feed]

let i = 0
let maxg = 500

while (i < maxg) {
    a = i
    b = i
    t = mod(i, 100) / 100

    v1 = f_add(a, b)
    v2 = f_sub(a, b)
    v3 = f_mul(v1, v2)
    v4 = f_div(v3, v1 + 1)
    v5 = f_mix(v1, v2, t)
    v6 = f_clamp(v5)
    v7 = f_nested(v6)

    // Final output path for debugging
    x = floor(v5 * 1000 + 0.5) / 1000
    y = floor(v7 * 1000 + 0.5) / 1000

    if (abs(x) < round_eps) { x = 0 }
    if (abs(y) < round_eps) { y = 0 }

    G1 X[x] Y[y] F[feed]

    i = i + 1
}

// === End ===
G0 Z[z_safe]
G0 X0 Y0








