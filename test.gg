// // GGcode test file
// /* This GGcode comment does not get compiled */
let id = 22222
let test = 69

note {
  ╔═╗╔═╗┌─┐┌─┐┌┬┐┌─┐     File compiled : [ggcode_file_name]  
  ║ ╦║ ╦│  │ │ ││├┤      Timestamp : [time]  
  ╚═╝╚═╝└─┘└─┘─┴┘└─┘     Program ID: [id]  
  Test Value: [test]  
}

// let baseX = 1
// let baseY = 1
// let size = 2
// let offset = 3
// let z_start = 0
// let z_step = -0.05
// let z_final = -0.5
// let liftZ = 1
// let feed = 120

G90 G94 G17
G20
G53 G0 Z0
T1 M6
S6000 M3
G54
M8

// note {EXPECT: Loop 30 x 10 grid, each with 30 Z-depth passes}

// for j = 0..10 {
//     for i = 0..40 {
//         let x = baseX + i * offset
//         let y = baseY + j * offset

//         note {Start square [i],[j] at X[x] Y[y]}
//         G0 X[x] Y[y]
//         G43 Z[0] H[1]
//         G0 Z[liftZ]

//         for pass = 1..30 {
//             let z = z_start + pass * z_step
//             note {Pass [pass] > Z[z]}
//             G1 Z[z] F[feed]
//             G1 X[x + size] Y[y]
//             G1 X[x + size] Y[y + size]
//             G1 X[x]        Y[y + size]
//             G1 X[x]        Y[y]
//             G0 Z[liftZ]
//         }

//         note {Final finish pass on square [i],[j]}
//         G1 Z[z_final] F[feed]
//         G1 X[x + size]     Y[y]
//         G1 X[x + size]     Y[y + size]
//         G1 X[x]            Y[y + size]
//         G1 X[x]            Y[y]
//         G0 Z[liftZ]
//     }
// }

// let x = 0
// let y = 0
// let step_size = 2

// let dx = 1
// let dy = 0
// let segment_length = 1
// let segment_passed = 0
// let direction_changes = 0

// let liftZ = 1
// let z_depth = -0.05      // current Z depth
// let z_dir = -1           // wave direction
// let z_wave_step = 0.005   // step size for Z wave
// let z_wave_min = -10
// let z_wave_max = 0.0
// let feed = 120
// let size = 2

// note {Square Spiral Path with Z wave oscillation}

// for i = 1..5000 {
//     note {Step [i] at X[x] Y[y] Z[z_depth]}

//     G0 X[x] Y[y]
//     G43 Z[0] H[1]
//     G0 Z[liftZ]
//     G1 Z[z_depth] F[feed]

//     G1 X[x + size] Y[y]
//     G1 X[x + size] Y[y + size]
//     G1 X[x]        Y[y + size]
//     G1 X[x]        Y[y]
//     G0 Z[liftZ]

//     // Update X and Y for spiral
//     let x = x + dx * step_size
//     let y = y + dy * step_size

//     // Wave Z up and down
//     let z_depth = z_depth + z_dir * z_wave_step
//     if z_depth <= z_wave_min {
//         let z_depth = z_wave_min
//         let z_dir = 1
//     } else if z_depth >= z_wave_max {
//         let z_depth = z_wave_max
//         let z_dir = -1
//     }

//     // Track spiral turns
//     let segment_passed = segment_passed + 1
//     if segment_passed == segment_length {
//         let segment_passed = 0
//         let direction_changes = direction_changes + 1

//         // Rotate 90° clockwise
//         if dx == 1 && dy == 0 {
//             let dx = 0
//             let dy = 1
//         } else if dx == 0 && dy == 1 {
//             let dx = -1
//             let dy = 0
//         } else if dx == -1 && dy == 0 {
//             let dx = 0
//             let dy = -1
//         } else if dx == 0 && dy == -1 {
//             let dx = 1
//             let dy = 0
//         }

//         // Extend spiral arm every 2 turns
//         if direction_changes == 2 {
//             let segment_length = segment_length + 1
//             let direction_changes = 0
//         }
//     }
// }

let x = 0
let y = 6

function hh(){return 99 }x = hh()note {[x]}x = 7 note {[x]}for i = 1..30 {x = i G1 X[x] G1 X[x] G1 X[x] G0 X[x] G0 X[x] x = i +33333note {[x]}}





    // Spiral update

