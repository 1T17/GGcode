// Arc Commands Example (G2/G3)
// G2 (clockwise arc) and G3 (counter-clockwise arc) commands

note {
  Arc Commands Example
  Demonstrates: G2 (clockwise arc), G3 (counter-clockwise arc)
  Uses: I, J center offsets and R radius methods
  Author: GGcode Examples
  Version: 1.0
}
let id = 4444
// Configurable parameters
let center_x = 0 /// @number -50 50 // Center X coordinate
let center_y = 0 /// @number -50 50 // Center Y coordinate
let radius = 20 /// @number 10 40 // Arc radius
let feed_rate = 150 /// @number 50 300 // Feed rate in mm/min
let arc_angle = 90 /// @number 30 180 // Arc angle in degrees
let z_depth = -1 /// @number -5 0 // Z cutting depth
let z_safe = 2 /// @number 1 5 // Safe Z height

// Move to safe height and starting position
G0 Z[z_safe]
G0 X[center_x] Y[center_y]

// Move to starting point of first arc
let start_x = center_x + radius
let start_y = center_y
G0 X[start_x] Y[start_y]
G1 Z[z_depth] F[feed_rate]

// Draw a clockwise arc (G2) using I,J center offset method
// G2 X[end_x] Y[end_y] I[center_offset_x] J[center_offset_y]
let end_x = center_x
let end_y = center_y + radius
let i_offset = -radius  // X offset from start to center
let j_offset = 0        // Y offset from start to center

G2 X[end_x] Y[end_y] I[i_offset] J[j_offset] F[feed_rate]

// Draw a counter-clockwise arc (G3) using R radius method
// G3 X[end_x] Y[end_y] R[radius]
let end_x2 = center_x - radius
let end_y2 = center_y
G3 X[end_x2] Y[end_y2] R[radius] F[feed_rate]

// Draw another clockwise arc back to start
let end_x3 = start_x
let end_y3 = start_y
G2 X[end_x3] Y[end_y3] R[radius] F[feed_rate]

// Move to safe height
G0 Z[z_safe]

// Now draw a more complex pattern with multiple arcs
// Move to new starting position
let pattern_center_x = center_x + 60
let pattern_center_y = center_y
G0 X[pattern_center_x] Y[pattern_center_y]

// Draw a flower-like pattern using arcs
let petal_radius = radius * 0.6
let petal_count = 6 /// @number 4 12 // Number of petals

for i = 0..petal_count {
    let angle = (i * 360 / petal_count) * DEG_TO_RAD
    let petal_start_x = pattern_center_x + petal_radius * cos(angle)
    let petal_start_y = pattern_center_y + petal_radius * sin(angle)
    
    // Move to petal start
    G0 X[petal_start_x] Y[petal_start_y]
    G1 Z[z_depth] F[feed_rate]
    
    // Draw petal using two arcs
    let petal_end_x = pattern_center_x + petal_radius * cos(angle + PI)
    let petal_end_y = pattern_center_y + petal_radius * sin(angle + PI)
    
    // First arc (clockwise)
    G2 X[petal_end_x] Y[petal_end_y] R[petal_radius] F[feed_rate]
    
    // Second arc (counter-clockwise) back to start
    G3 X[petal_start_x] Y[petal_start_y] R[petal_radius] F[feed_rate]
}

// Move to safe height
G0 Z[z_safe]



// Now demonstrate spiral made from small G2/G3 arc sections
let arc_spiral_center_x = center_x
let arc_spiral_center_y = center_y + 60
let arc_spiral_start_radius = 8 /// @number 5 15 // Arc spiral start radius
let arc_spiral_max_radius = 25 /// @number 15 35 // Arc spiral max radius
let arc_spiral_revolutions = 1 /// @number 1 3 // Arc spiral revolutions
let arc_segment_angle = 15 /// @number 5 30 // Angle of each arc segment in degrees

G0 X[arc_spiral_center_x + arc_spiral_start_radius] Y[arc_spiral_center_y]
G1 Z[z_depth] F[feed_rate]

let current_arc_radius = arc_spiral_start_radius
let total_angle = arc_spiral_revolutions * 360
let total_segments = total_angle / arc_segment_angle
let radius_step = (arc_spiral_max_radius - arc_spiral_start_radius) / total_segments

// Draw spiral using small arc segments
for i = 0..total_segments {
    let current_angle = i * arc_segment_angle * DEG_TO_RAD
    let next_angle = (i + 1) * arc_segment_angle * DEG_TO_RAD
    let next_radius = current_arc_radius + radius_step
    
    // Calculate start and end points for this arc segment
    let start_x = arc_spiral_center_x + current_arc_radius * cos(current_angle)
    let start_y = arc_spiral_center_y + current_arc_radius * sin(current_angle)
    let end_x = arc_spiral_center_x + next_radius * cos(next_angle)
    let end_y = arc_spiral_center_y + next_radius * sin(next_angle)
    
    // Use G2 for clockwise arc segment
    G2 X[end_x] Y[end_y] R[current_arc_radius] F[feed_rate]
    
    current_arc_radius = next_radius
}

// Move to safe height
G0 Z[z_safe]

// Demonstrate alternating G2/G3 arc segments for a different spiral pattern
let alt_spiral_center_x = center_x + 120
let alt_spiral_center_y = center_y + 120
let alt_spiral_start_radius = 6 /// @number 3 12 // Alt spiral start radius
let alt_spiral_max_radius = 20 /// @number 10 30 // Alt spiral max radius
let alt_spiral_revolutions = 1.5 /// @number 0.5 3 // Alt spiral revolutions
let alt_segment_angle = 20 /// @number 10 45 // Alt segment angle in degrees

G0 X[alt_spiral_center_x + alt_spiral_start_radius] Y[alt_spiral_center_y]
G1 Z[z_depth] F[feed_rate]

let alt_current_radius = alt_spiral_start_radius
let alt_total_angle = alt_spiral_revolutions * 360
let alt_total_segments = alt_total_angle / alt_segment_angle
let alt_radius_step = (alt_spiral_max_radius - alt_spiral_start_radius) / alt_total_segments

// Draw spiral using alternating G2/G3 arc segments
for i = 0..alt_total_segments {
    let current_angle = i * alt_segment_angle * DEG_TO_RAD
    let next_angle = (i + 1) * alt_segment_angle * DEG_TO_RAD
    let next_radius = alt_current_radius + alt_radius_step
    
    // Calculate start and end points for this arc segment
    let start_x = alt_spiral_center_x + alt_current_radius * cos(current_angle)
    let start_y = alt_spiral_center_y + alt_current_radius * sin(current_angle)
    let end_x = alt_spiral_center_x + next_radius * cos(next_angle)
    let end_y = alt_spiral_center_y + next_radius * sin(next_angle)
    
    // Alternate between G2 (clockwise) and G3 (counter-clockwise)
    if (mod(i, 2) == 0) {
        // Use G2 for clockwise arc segment
        G2 X[end_x] Y[end_y] R[alt_current_radius] F[feed_rate]
    } else {
        // Use G3 for counter-clockwise arc segment
        G3 X[end_x] Y[end_y] R[alt_current_radius] F[feed_rate]
    }
    
    alt_current_radius = next_radius
}

// Return to safe height and home position
G0 Z[z_safe]
G0 X[0] Y[0] 