<script>
  let editor, outputEditor;
  let monacoReady = false;
  let autoCompile = false;
  let autoCompileTimeout = null;
  let lastOpenedFilename = '';

  // Load saved filename on page load
  document.addEventListener('DOMContentLoaded', function () {
    const savedFilename = localStorage.getItem('ggcode_last_filename');
    if (savedFilename) {
      lastOpenedFilename = savedFilename;
    }
  });

  // Save content periodically and on page unload
  function saveContent() {
    try {
      if (editor) {
        localStorage.setItem('ggcode_input_content', editor.getValue());
      }
      if (outputEditor) {
        localStorage.setItem('ggcode_output_content', outputEditor.getValue());
      }
    } catch (e) {
      if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {

      } else {
        throw e;
      }
    }
  }

  // Auto-save content every 30 seconds
  setInterval(saveContent, 30000);

  // Save content when page is about to unload
  window.addEventListener('beforeunload', saveContent);

  require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs' } });

  require(['vs/editor/editor.main'], function () {




    monaco.languages.register({ id: 'ggcode' });

    monaco.editor.defineTheme('ggcode-dark', {
      base: 'vs-dark',
      inherit: true,
      rules: [
        { token: 'keyword', foreground: '6FBAE3' },
        { token: 'gcode', foreground: '#F21B3F' },
        { token: 'axis', foreground: 'ff66cc' },
        { token: 'number', foreground: 'D0ECB1' },
        { token: 'comment', foreground: '#577834', fontStyle: 'italic' },
        { token: 'variable', foreground: 'ffaa00' },
        { token: 'constant', foreground: '00ff99' },
        { token: 'predefined', foreground: 'ff66cc' },
        { token: 'identifier', foreground: '#F5F5F5' },
        // Custom axis colors
        // Axis color-coded per CNC convention
        { token: 'axis.x', foreground: '#D9372B' },   // Soft red
        { token: 'axis.y', foreground: '#57C24F' },   // Soft green
        { token: 'axis.z', foreground: '#3B65B8' },   // Soft blue
        { token: 'axis.a', foreground: 'ff99ff' },   // Soft magenta
        { token: 'axis.b', foreground: '99ffff' },   // Soft cyan
        { token: 'axis.c', foreground: 'ffff99' },   // Soft yellow
        { token: 'axis.e', foreground: 'ffdddd' },   // Soft light red
        { token: 'axis.f', foreground: 'aaaaaa' },   // Soft gray
        { token: 'axis.s', foreground: 'ffbb66' },   // Soft orange
        { token: 'axis.t', foreground: 'dddddd' },   // Soft white
        { token: 'axis.h', foreground: 'bbbbff' },   // Soft light blue
        { token: 'axis.r', foreground: 'aaffaa' },   // Soft light green
        { token: 'axis.p', foreground: 'bbffff' },   // Soft pale cyan

        { token: 'axis.t', foreground: '#B02BD9' },   // Soft pale cyan

        { token: 'nline', foreground: '#5C5C5C' },   // Soft pale cyan

      ],
      colors: {} // âœ… Add this line to prevent the crash
    });



    monaco.languages.setMonarchTokensProvider('ggcode', {
      keywords: ['let', 'if', 'else', 'for', 'while', 'function', 'return', 'note'],
      constants: ['PI', 'E', 'TAU', 'DEG_TO_RAD'],
      builtins: ['abs', 'mod', 'sin', 'cos', 'tan', 'sqrt', 'hypot', 'floor', 'ceil', 'round', 'clamp', 'distance'],

      operators: ['=', '+', '-', '*', '/', '%', '..'],
      symbols: /[=><!~?:&|+\-*\/\^%]+/,

      tokenizer: {
        root: [
          // Axis with values (each treated separately)
          // Axis with bracketed variables (e.g., X[f], Y[y+1])
          [/\bX\[[^\]]+\]/, 'axis.x'],
          [/\bY\[[^\]]+\]/, 'axis.y'],
          [/\bZ\[[^\]]+\]/, 'axis.z'],
          [/\bA\[[^\]]+\]/, 'axis.a'],
          [/\bB\[[^\]]+\]/, 'axis.b'],
          [/\bC\[[^\]]+\]/, 'axis.c'],
          [/\bE\[[^\]]+\]/, 'axis.e'],
          [/\bF\[[^\]]+\]/, 'axis.f'],
          [/\bS\[[^\]]+\]/, 'axis.s'],
          [/\bT\[[^\]]+\]/, 'axis.t'],
          [/\bH\[[^\]]+\]/, 'axis.h'],
          [/\bR\[[^\]]+\]/, 'axis.r'],
          [/\bP\[[^\]]+\]/, 'axis.p'],
          [/\bP\[[^\]]+\]/, 'axis.t'],
          [/\bX[+-]?[0-9.]+\b/, 'axis.x'],
          [/\bY[+-]?[0-9.]+\b/, 'axis.y'],
          [/\bZ[+-]?[0-9.]+\b/, 'axis.z'],
          [/\bA[+-]?[0-9.]+\b/, 'axis.a'],
          [/\bB[+-]?[0-9.]+\b/, 'axis.b'],
          [/\bC[+-]?[0-9.]+\b/, 'axis.c'],
          [/\bE[+-]?[0-9.]+\b/, 'axis.e'],  // NEW
          [/\bF[+-]?[0-9.]+\b/, 'axis.f'],
          [/\bS[+-]?[0-9.]+\b/, 'axis.s'],
          [/\bT[+-]?[0-9.]+\b/, 'axis.t'],
          [/\bH[+-]?[0-9.]+\b/, 'axis.h'],
          [/\bR[+-]?[0-9.]+\b/, 'axis.r'],
          [/\bP[+-]?[0-9.]+\b/, 'axis.p'],
          [/\bP[+-]?[0-9.]+\b/, 'axis.t'],
          [/\bN[+-]?[0-9.]+\b/, 'nline'],

          // Keywords
          [/\b(let|if|else|for|while|function|return|note)\b/, 'keyword'],

          // Built-in constants
          [/\b(PI|E|TAU|DEG_TO_RAD)\b/, 'constant'],

          // Built-in functions
          [/\b(abs|mod|sin|cos|tan|sqrt|hypot|floor|ceil|round|clamp|distance)\b/, 'predefined'],

          // G-code / M-code
          [/\b(G\d+|M\d+)\b/, 'gcode'],

          // Axis with numeric values (X10, Y-5.5, etc.)
          [/\b([XYZABC][+-]?[0-9.]+)\b/, 'axis'],
          [/\b([FSTHRP][+-]?[0-9.]+)\b/, 'axis'],

          // Variables in brackets like [x], [x+1]
          [/\[[^\]]+\]/, 'variable'],

          // Numbers
          [/\b\d+(\.\d+)?\b/, 'number'],

          // Line comments
          [/\/\/.*$/, 'comment'],

          // Parenthesis-style G-code comments ( )
          // [/\([^)]*\)/, 'comment'],

          // Multiline comments /% ... %/
          [/%\/.*$/, 'comment', '@blockComment'],

          // Brackets and symbols
          [/[{}\[\]()]/, '@brackets'],

          [/[a-zA-Z_]\w*/, {
            cases: {
              '@keywords': 'keyword',
              '@constants': 'constant',
              '@builtins': 'predefined',
              '@default': 'identifier'   // ðŸŸ¡ highlight user-defined vars here
            }
          }],
        ],

        blockComment: [
          [/.*%\//, 'comment', '@pop'],
          [/.*$/, 'comment']
        ]
      }
    });

    // Load saved content or use server-provided content
    let initialInput = `<%- input ? input.replace(/`/g, '\\\`') : '' %>`;
let initialOutput = `<%- typeof output !== 'undefined' && output ? output.replace(/`/g, '\\\`') : '' %>`;

  
  // Check for saved content in localStorage
  const savedInput = localStorage.getItem('ggcode_input_content');
  const savedOutput = localStorage.getItem('ggcode_output_content');
  
  if (savedInput && savedInput.trim() !== '') {
    initialInput = savedInput;
  }
  if (savedOutput && savedOutput.trim() !== '') {
    initialOutput = savedOutput;
  }

  editor = monaco.editor.create(document.getElementById('editor'), {
    value: initialInput,
    language: 'ggcode',
    theme: 'ggcode-dark',
    automaticLayout: true,
    minimap: { enabled: true }
  });

  outputEditor = monaco.editor.create(document.getElementById('output'), {
    value: initialOutput,
    language: 'ggcode',
    theme: 'ggcode-dark',
    automaticLayout: true,
    minimap: { enabled: true }
  });
  window.outputEditor = outputEditor;
  monacoReady = true;

  // Auto-compile logic
  let skipAutoCompile = false;
  editor.onDidChangeModelContent(() => {
    if (autoCompile && !skipAutoCompile) {
      if (autoCompileTimeout) clearTimeout(autoCompileTimeout);
      autoCompileTimeout = setTimeout(() => {
        submitGGcode(new Event('submit'));
      }, 1000);
    }
    skipAutoCompile = false; // Reset flag after handling
  });

  // Drag-and-drop file support for editor
  const editorDom = document.getElementById('editor');
  if (editorDom) {
    editorDom.addEventListener('dragover', function(e) {
      e.preventDefault();
      editorDom.style.background = '#222a';
    });
    editorDom.addEventListener('dragleave', function(e) {
      e.preventDefault();
      editorDom.style.background = '';
    });
    editorDom.addEventListener('drop', function(e) {
      e.preventDefault();
      editorDom.style.background = '';
      if (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length > 0) {
        const file = e.dataTransfer.files[0];
        const reader = new FileReader();
        reader.onload = function(evt) {
          // Only set the output editor if it's the 'Open G-code' button
          if (file.name.endsWith('.gcode') || file.name.endsWith('.ggcode')) {
            if (outputEditor) {
              outputEditor.setValue(evt.target.result);
            }
          }
          // Remember filename
          lastOpenedFilename = file.name || '';
          localStorage.setItem('ggcode_last_filename', lastOpenedFilename);
        };
        reader.readAsText(file);
      }
    });
  }
});

// Auto-compile checkbox logic
document.addEventListener('DOMContentLoaded', function() {
  const autoCheckbox = document.getElementById('autoCompileCheckbox');
  if (autoCheckbox) {
    // Load saved auto-compile state
    const savedAutoCompile = localStorage.getItem('ggcode_auto_compile');
    if (savedAutoCompile !== null) {
      autoCompile = savedAutoCompile === 'true';
      autoCheckbox.checked = autoCompile;
    }
    
    autoCheckbox.addEventListener('change', function() {
      autoCompile = autoCheckbox.checked;
      // Save auto-compile state to localStorage
      localStorage.setItem('ggcode_auto_compile', autoCompile.toString());
    });
  }
});

// Open GGcode file logic
document.addEventListener('DOMContentLoaded', function() {
  const openBtn = document.getElementById('openGGcodeBtn');
  const fileInput = document.getElementById('ggcodeFileInput');
  if (openBtn && fileInput) {
    openBtn.addEventListener('click', function() {
      fileInput.value = '';
      fileInput.click();
    });
    fileInput.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = function(evt) {
        if (editor) editor.setValue(evt.target.result);
        // Remember filename
        lastOpenedFilename = file.name || '';
        localStorage.setItem('ggcode_last_filename', lastOpenedFilename);
        // Direct compilation after file load
        submitGGcode(new Event('submit'));
      };
      reader.readAsText(file);
    });
  }
});



function syncEditors() {
  document.getElementById('ggcode').value = editor.getValue();
}

async function submitGGcode(event) {
  event.preventDefault();
  if (!monacoReady) {
    alert("Editor is still loading. Please wait a moment and try again.");
    return false;
  }
  syncEditors();
  const code = editor.getValue();
  if (outputEditor) {
    outputEditor.setValue('Compiling...');
  }
  try {
    const response = await fetch('/api/compile', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ggcode: code })
    });
    const result = await response.json();
    if (result.success) {
      if (outputEditor) {
        outputEditor.setValue(result.output);
      }
      // Save content after successful compilation
      saveContent();
    } else {
      if (outputEditor) outputEditor.setValue('Error: ' + result.error);
    }
  } catch (err) {
    if (outputEditor) outputEditor.setValue('Network error: ' + err.message);
  }
  return false;
}

function copyOutput() {
  if (outputEditor) {
    navigator.clipboard.writeText(outputEditor.getValue())
      .catch(err => alert("Failed to copy: " + err));
  }
}

function saveOutput() {
  if (outputEditor) {
    const blob = new Blob([outputEditor.getValue()], { type: 'text/plain' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    // Improved filename logic for output
    let filename = '';
    if (lastOpenedFilename) {
      let base = lastOpenedFilename;
      if (base.endsWith('.gcode') || base.endsWith('.ggcode')) {
        base = base.replace(/\.(gcode|ggcode)$/i, '');
      } else if (base.lastIndexOf('.') > 0) {
        base = base.slice(0, base.lastIndexOf('.'));
      }
      filename = base + '.g.gcode';
    }
    if (!filename) filename = 'output.g.gcode';
    // Prompt user for filename
    const userFilename = window.prompt('Save G-code as:', filename);
    if (!userFilename) return; // Cancelled
    a.download = userFilename;
    a.click();
  }
}

function saveGGcode() {
  const blob = new Blob([editor.getValue()], { type: 'text/plain' });
  const a = document.createElement('a');
  a.href = URL.createObjectURL(blob);
  let filename = lastOpenedFilename && lastOpenedFilename.endsWith('.ggcode') ? lastOpenedFilename : '';
  if (!filename && lastOpenedFilename) {
    // If opened file has another extension, use its base name with .ggcode
    const dot = lastOpenedFilename.lastIndexOf('.');
    filename = (dot > 0 ? lastOpenedFilename.slice(0, dot) : lastOpenedFilename) + '.ggcode';
  }
  if (!filename) filename = 'input.ggcode';
  // Prompt user for filename
  const userFilename = window.prompt('Save GGcode as:', filename);
  if (!userFilename) return; // Cancelled
  a.download = userFilename;
  a.click();
}

function clearMemory() {
  if (confirm('This will clear all saved content and settings. Are you sure?')) {
    // Clear localStorage
    localStorage.removeItem('ggcode_input_content');
    localStorage.removeItem('ggcode_output_content');
    localStorage.removeItem('ggcode_last_filename');
    localStorage.removeItem('ggcode_auto_compile');
    
    // Reset variables
    lastOpenedFilename = '';
    autoCompile = false;
    
    // Reset UI
    const autoCheckbox = document.getElementById('autoCompileCheckbox');
    if (autoCheckbox) {
      autoCheckbox.checked = false;
    }
    
    // Clear editors
    if (editor) {
      editor.setValue('');
    }
    if (outputEditor) {
      outputEditor.setValue('');
    }
    
    alert('Memory cleared successfully!');
  }
}

// Modal functions
function showModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.style.display = 'flex';
    // Close modal when clicking outside
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeModal(modalId);
      }
    });
  }
}

function closeModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.style.display = 'none';
  }
}



async function showExamples() {
  showModal('examplesModal');
  await loadExamples();
  // Setup examples search after examples are loaded
  setTimeout(setupExamplesSearch, 100);
  // Focus search input
  setTimeout(() => {
    const searchInput = document.getElementById('examplesSearchInput');
    if (searchInput) {
      searchInput.focus();
    }
  }, 200);
}

async function loadExamples() {
  const examplesList = document.getElementById('examplesList');
  if (!examplesList) return;

  try {
    const response = await fetch('/api/examples');
    const examples = await response.json();
    
    if (examples.success) {
      examplesList.innerHTML = examples.files.map(file => `
  < div class="example-item" onclick = "loadExample('${file.name}')" >
          <div class="example-title">${file.name}</div>
          <div class="example-description">${file.description || 'Click to load this example'}</div>
          <div class="example-preview">${file.preview || ''}</div>
        </div >
    `).join('');
    } else {
      examplesList.innerHTML = '<p style="color: #cccccc;">Failed to load examples</p>';
    }
  } catch (error) {
    examplesList.innerHTML = '<p style="color: #cccccc;">Error loading examples: ' + error.message + '</p>';
  }
}

async function loadExample(filename) {
  try {
    const response = await fetch(`/ api / examples / ${ encodeURIComponent(filename) } `);
    const result = await response.json();
    
    if (result.success) {
      // Set the correct editor based on file type
      if (filename.endsWith('.ggcode')) {
        if (editor) editor.setValue(result.content);
      } else if (filename.endsWith('.gcode')) {
        if (outputEditor) outputEditor.setValue(result.content);
      }
      // Remember filename
      lastOpenedFilename = filename;
      localStorage.setItem('ggcode_last_filename', lastOpenedFilename);
      // Direct compilation after file load
      submitGGcode(new Event('submit'));
      closeModal('examplesModal');
    } else {
      alert('Failed to load example: ' + result.error);
    }
  } catch (error) {
    alert('Error loading example: ' + error.message);
  }
}

// Copy button functionality
function addCopyButtons() {
  const preElements = document.querySelectorAll('.help-content pre');
  preElements.forEach(pre => {
    // Check if copy button already exists
    if (pre.querySelector('.copy-button')) return;
    
    const copyButton = document.createElement('button');
    copyButton.className = 'copy-button';
    copyButton.textContent = 'Copy';
    copyButton.onclick = function() {
      const code = pre.textContent.replace('Copy', '').trim();
      navigator.clipboard.writeText(code).then(() => {
        copyButton.textContent = 'Copied!';
        copyButton.classList.add('copied');
        setTimeout(() => {
          copyButton.textContent = 'Copy';
          copyButton.classList.remove('copied');
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy: ', err);
        copyButton.textContent = 'Error';
        setTimeout(() => {
          copyButton.textContent = 'Copy';
        }, 2000);
      });
    };
    pre.appendChild(copyButton);
  });
}

// Add copy buttons when help modal is shown
function showHelp() {
  showModal('helpModal');
  // Add copy buttons after modal is shown
  setTimeout(addCopyButtons, 100);
  // Setup help search
  setupHelpSearch();
  // Focus search input
  setTimeout(() => {
    const searchInput = document.getElementById('helpSearchInput');
    if (searchInput) {
      searchInput.focus();
    }
  }, 200);
}

// Help search functionality
function setupHelpSearch() {
  const searchInput = document.getElementById('helpSearchInput');
  const searchResults = document.getElementById('helpSearchResults');
  const helpContent = document.getElementById('helpContent');
  
  if (!searchInput) return;
  
  console.log('Setting up help search...');
  console.log('Help content sections:', helpContent.querySelectorAll('.help-section').length);
  
  searchInput.addEventListener('input', function() {
    const query = this.value.toLowerCase().trim();
    console.log('Searching for:', query);
    
    if (query === '') {
      // Show all content
      const sections = helpContent.querySelectorAll('.help-section');
      sections.forEach(section => {
        section.classList.remove('hidden', 'highlight');
      });
      searchResults.textContent = '';
      return;
    }
    
    // Simple search: look for any text content that matches
    const allElements = helpContent.querySelectorAll('h3, h4, p, pre, li, code');
    let matchCount = 0;
    let matchedSections = new Set();
    
    // Reset all sections
    const sections = helpContent.querySelectorAll('.help-section');
    sections.forEach(section => {
      section.classList.remove('hidden', 'highlight');
    });
    
    // Search through all elements
    allElements.forEach(element => {
      const text = element.textContent.toLowerCase();
      if (text.includes(query)) {
        matchCount++;
        // Find the section containing this element
        let section = element;
        while (section && !section.classList.contains('help-section')) {
          section = section.parentElement;
        }
        if (section) {
          matchedSections.add(section);
          section.classList.add('highlight');
        }
      }
    });
    
    // Hide sections that don't contain matches
    sections.forEach(section => {
      if (!matchedSections.has(section)) {
        section.classList.add('hidden');
      }
    });
    
    // Update results count
    if (matchCount > 0) {
      searchResults.textContent = `Found ${ matchCount } matching element${ matchCount > 1 ? 's' : '' } in ${ matchedSections.size } section${ matchedSections.size > 1 ? 's' : '' } `;
    } else {
      searchResults.textContent = 'No matches found';
    }
  });
  
  // Clear search when modal is closed
  searchInput.value = '';
  searchResults.textContent = '';
}

// Examples search functionality
function setupExamplesSearch() {
  const searchInput = document.getElementById('examplesSearchInput');
  const searchResults = document.getElementById('examplesSearchResults');
  const examplesList = document.getElementById('examplesList');
  
  if (!searchInput) return;
  
  searchInput.addEventListener('input', function() {
    const query = this.value.toLowerCase().trim();
    const exampleItems = examplesList.querySelectorAll('.example-item');
    let matchCount = 0;
    
    exampleItems.forEach(item => {
      const title = item.querySelector('.example-title').textContent.toLowerCase();
      const description = item.querySelector('.example-description').textContent.toLowerCase();
      const preview = item.querySelector('.example-preview').textContent.toLowerCase();
      
      if (title.includes(query) || description.includes(query) || preview.includes(query)) {
        item.style.display = 'block';
        matchCount++;
      } else {
        item.style.display = 'none';
      }
    });
    
    // Update results count
    if (query === '') {
      searchResults.textContent = '';
    } else if (matchCount > 0) {
      searchResults.textContent = `Found ${ matchCount } matching example${ matchCount > 1 ? 's' : '' }`;
    } else {
      searchResults.textContent = 'No examples found';
    }
  });
  
  // Clear search when modal is closed
  searchInput.value = '';
  searchResults.textContent = '';
}
</script>