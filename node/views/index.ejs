<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>GGcode Compiler</title>
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="/flags.css">
  

</head>

<body>


  <form id="ggform" action="/compile" method="POST" onsubmit="return submitGGcode(event)">
    <!-- Editor and Output -->
    <div class="main-content">
      <div class="left-panel">
        <div id="editor"></div>
      </div>
      <div class="right-panel">
        <div id="output"></div>


        <div id="annotations-container">
          <div class="ann-toolbar">
            <div id="ann-toggle" class="ann-toggle" aria-label="Toggle annotations" aria-expanded="true">
              <!-- chevron (white via currentColor) -->
              <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                <path d="M6 9l6 6 6-6" fill="none" stroke="currentColor" stroke-width="2"
                      stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </div>
          <div id="annotations"></div>
        </div>
        



      </div>
    </div>

    <textarea name="ggcode" id="ggcode" style="display:none;"><%= input %></textarea>

    <!-- Bottom Control Bar -->
    <div class="control-bar">
      <div class="control-left">
        <div class="button-group">


          <!-- Compile -->
          <button type="submit" title="Compile GGcode">
            <svg width="14" height="14" fill="#d38a2c" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 16h16V0H0zm2-2V2h12v12zm4-3 5-3-5-3z" fill-rule="evenodd" />
            </svg>
            </svg>
            <div style="color: #d38a2c;">Compile</div>
          </button>
          <div class="separator"></div>

          <!-- Configurator -->
          <button type="button" onclick="showConfigurator()" title="Open Configurator" id="configuratorBtn">


            <svg width="14" height="14" fill="#2c90d3" viewBox="1 1 23 23" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M20.1 9.221c-1.81 0-2.55-1.28-1.65-2.85.52-.91.21-2.07-.7-2.59l-1.73-.99c-.79-.47-1.81-.19-2.28.6l-.11.19c-.9 1.57-2.38 1.57-3.29 0l-.11-.19a1.64 1.64 0 0 0-2.26-.6l-1.73.99c-.91.52-1.22 1.69-.7 2.6.91 1.56.17 2.84-1.64 2.84-1.04 0-1.9.85-1.9 1.9v1.76c0 1.04.85 1.9 1.9 1.9 1.81 0 2.55 1.28 1.64 2.85-.52.91-.21 2.07.7 2.59l1.73.99c.79.47 1.81.19 2.28-.6l.11-.19c.9-1.57 2.38-1.57 3.29 0l.11.19c.47.79 1.49 1.07 2.28.6l1.73-.99c.91-.52 1.22-1.69.7-2.59-.91-1.57-.17-2.85 1.64-2.85 1.04 0 1.9-.85 1.9-1.9v-1.76a1.92 1.92 0 0 0-1.91-1.9m-8.1 6.03c-1.79 0-3.25-1.46-3.25-3.25s1.46-3.25 3.25-3.25 3.25 1.46 3.25 3.25-1.46 3.25-3.25 3.25" />
            </svg>

            <div style="color: #2c90d3;">Configurator</div>
          </button>


          <div class="separator"></div>

          <!-- Open -->
          <button type="button" id="openGGcodeBtn" title="Open GGcode file">
            <svg width="14" height="14" fill="#ffffff" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 16h16V0H0zm2-4V2h12v10zm2-2h2V8H4zm6 0h2V8h-2z" fill-rule="evenodd" />
            </svg>
            </svg>
            Open
          </button>

          <div class="separator"></div>

          <!-- Examples -->
          <button type="button" onclick="showExamples()" title="Load example files">
            <svg width="14" height="14" fill="#d32cc5" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="m0 10 8 4 8-4v2l-8 4-8-4zm0-4 8 4 8-4v2l-8 4-8-4zm8-6 8 4-8 4-8-4z" fill-rule="evenodd" />
            </svg>
            </svg>
            <div style="color: #d32cc5;">Examples</div>
          </button>

          <div class="separator"></div>

          <!-- Save -->
          <button type="button" onclick="saveGGcode()" title="Save GGcode input to file">
            <svg width="14" height="14" fill="#3ad32c" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="M11 14v-4H5v4H3V8h10v6zh3V2H4v4h8V2h-2v2H6V2H2v12h3zM0 0h16v16H0z" fill-rule="evenodd" />
            </svg>
            <div style="color: #3ad32c;">Save</div>
          </button>
        </div>
      </div>

      <div class="control-right">
        <div class="gcode-group">

          <!-- Copy -->
          <button type="button" onclick="copyOutput()" title="Copy output G-code">
            <svg width="14" height="14" fill="#ffffff" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="M14 12V2H4V0h12v12zM0 4h12v12H0zm2 2v8h8V6z" fill-rule="evenodd" />
            </svg>
            Copy
          </button>

          <div class="separator"></div>

          <!-- Visualizer -->
          <button type="button" onclick="showGcodeViewer()" title="Open 3D G-code visualizer">
            <svg width="14" height="14" fill="#d3b42c" viewBox="820 800 150 180" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M992.633 885.563c-9.229-13.025-43.469-55.521-96.634-55.521-53.167 0-87.404 42.496-96.631 55.52-4.49 6.339-4.491 14.533-.001 20.877 9.228 13.024 43.471 55.52 96.632 55.52 53.176 0 87.406-42.495 96.63-55.518 4.494-6.339 4.494-14.534.004-20.878m-139.105-19.592a45.2 45.2 0 0 1 7.564-13.338 19.47 19.47 0 0 1 9.397-6.301c7.865-2.413 16.378-3.863 25.509-3.863s17.645 1.45 25.508 3.863a19.54 19.54 0 0 1 9.397 6.3 45.1 45.1 0 0 1 7.564 13.339 45 45 0 0 1 2.626 15.204c0 24.864-20.229 45.093-45.096 45.093s-45.096-20.229-45.096-45.093a45 45 0 0 1 2.627-15.204m128.962 33.285c-8.354 11.794-39.279 50.276-86.491 50.276-47.2 0-78.136-38.483-86.491-50.274-1.423-2.01-1.423-4.506 0-6.512 4.573-6.456 15.922-20.899 32.989-32.658-.224.563-.461 1.122-.667 1.692a57.4 57.4 0 0 0-3.353 19.395c0 31.716 25.805 57.519 57.522 57.519 31.718 0 57.522-25.803 57.522-57.519a57.4 57.4 0 0 0-3.354-19.396c-.205-.569-.443-1.128-.666-1.691 17.066 11.759 28.417 26.204 32.99 32.658 1.423 2.008 1.423 4.501-.001 6.51" />
              <path
                d="M896.204 912.338c17.025 0 30.825-13.801 30.825-30.825 0-17.022-13.8-30.825-30.825-30.825a30.7 30.7 0 0 0-13.521 3.121c6.785.541 12.12 6.201 12.12 13.123 0 7.276-5.899 13.178-13.18 13.178-6.919 0-12.581-5.338-13.123-12.115a30.7 30.7 0 0 0-3.12 13.519c-.001 17.023 13.802 30.824 30.824 30.824" />
            </svg>
            <div style="color: #d3b42c;">Visualizer</div>
          </button>

          <div class="separator"></div>

          <!-- Export -->
          <button type="button" onclick="saveOutput()" title="Save output G-code to file">
            <svg width="14" height="14" fill="#3ad32c" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="M14 3.5 8.5 9 7 7.5 12.5 2H10V0h6v6h-2zM6 0v2H2v12h12v-4h2v6H0V0z" fill-rule="evenodd" />
            </svg>
            <div style="color: #3ad32c;">Export</div>
          </button>
        </div>

        <div class="utility-group">

          <!-- Help -->
          <button type="button" onclick="showHelp()" title="Show help and documentation">

            <svg width="14" height="14" fill="#2cd3b7" viewBox="10 10 420 420" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M213.333 0c117.82 0 213.334 95.512 213.334 213.333 0 117.82-95.513 213.334-213.334 213.334C95.513 426.667 0 331.154 0 213.333S95.513 0 213.333 0m0 282.667c-14.729 0-26.668 11.938-26.668 26.666S198.605 336 213.332 336 240 324.061 240 309.333s-11.94-26.666-26.667-26.666m-3.56-189.332c-20.765 0-38.218 5.657-52.338 16.94-16.732 13.516-25.091 33.476-25.091 59.898h45.362v-.304c0-10.081 2.123-18.35 6.36-24.8 5.845-8.67 15.327-13.01 28.435-13.01 8.067 0 14.933 2.118 20.57 6.346 7.054 5.858 10.593 14.725 10.593 26.624 0 7.463-1.824 14.114-5.45 19.966-3.025 5.242-7.864 10.38-14.528 15.425-14.114 9.679-23.292 19.26-27.52 28.743-3.631 7.864-5.455 20.367-5.455 37.504h42.665c0-11.296 1.501-19.76 4.54-25.41 2.416-4.638 7.463-9.575 15.127-14.822 13.315-9.885 22.785-19.064 28.436-27.534 6.853-10.08 10.288-21.881 10.288-35.397 0-28.01-11.392-47.878-34.195-59.58-13.706-7.056-29.638-10.59-47.799-10.59" />
            </svg>



            <div style="color: #2cd3b7;">Help</div>
          </button>

          <!-- Clear -->
          <button type="button" onclick="clearMemory()" title="Clear saved content and settings">
            <svg width="14" height="14" fill="#d32c2c" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M0 14.545 1.455 16 8 9.455 14.545 16 16 14.545 9.455 8 16 1.455 14.545 0 8 6.545 1.455 0 0 1.455 6.545 8z"
                fill-rule="evenodd" />
            </svg>

            <div style="color: #d32c2c;">Clear</div>
          </button>

          <!-- <div class="separator"></div>
           Auto Compile
          <div class="toggle-container">
            <input type="checkbox" id="autoCompileCheckbox" />
            <label for="autoCompileCheckbox">Auto</label>
          </div> -->


        </div>
      </div>
    </div>

    <input type="file" id="ggcodeFileInput" accept=".ggcode,.txt" style="display:none;" />
  </form>



  <%- include('helpExamples.ejs') %>



    <!-- Configurator Modal -->
    <div id="configuratorModal"
      style="display:none; position:fixed; top:0; left:0; right:auto; width:50vw; height:100vh; background:rgba(30, 30, 30, 0.856); z-index:1000; box-shadow: 4px 0 24px #0008; flex-direction:column;">
      <div style="width:100%; display:flex; justify-content:flex-end; padding:10px;">
        <button onclick="closeConfigurator()" title="Close" class="sim-btn sim-exit" style="margin-left:auto;">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M2 2L14 14M14 2L2 14" stroke="#fff" stroke-width="2" stroke-linecap="round" />
          </svg>
        </button>
      </div>


      <div id="configuratorContent" style="overflow-y:auto; height:calc(100vh - 60px);">
        <!-- configurator Content here -->
      </div>



      <div class="control-bar">
        <div class="button-group">

          <!-- Save & Compile -->
          <button type="button" title="Save & Compile GGcode" onclick="configuratorSaveAndCompile()">
            <svg width="14" height="14" fill="#3ad32c" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="M11 14v-4H5v4H3V8h10v6zh3V2H4v4h8V2h-2v2H6V2H2v12h3zM0 0h16v16H0z" fill-rule="evenodd" />
            </svg>
            <div style="color: #3ad32c;">Save</div>
          </button>

          <div class="separator"></div>

          <!-- Compile -->
          <button type="button" title="Compile GGcode" onclick="configuratorCompileOnly()">
            <svg width="14" height="14" fill="#d38a2c" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 16h16V0H0zm2-2V2h12v12zm4-3 5-3-5-3z" fill-rule="evenodd" />
            </svg>
            <div style="color: #d38a2c;">Compile</div>
          </button>

        </div>
      </div>


    </div>




    <!-- Three.js for 3D visualization -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="/OrbitControls.js"></script>

    <!-- Monaco loader -->
    <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs/loader.js"></script>


    <%- include('app.ejs') %>
      <%- include('view.ejs') %>






        <script>
          // --- Configurator GGcode Parser and Form Renderer ---
          function parseConfiguratorVars(ggcode) {
            const lines = ggcode.split(/\r?\n/);
            const configVars = [];
            for (const line of lines) {
              const match = line.match(/^\s*let\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*([^/]+?)\s*\/\/\/\s*(.*)$/);
              if (!match) continue;
              const name = match[1];
              const rawValue = match[2].trim();
              let tag = match[3].trim();
              let description = '';
              // Extract description if present (after //)
              const descIdx = tag.indexOf('//');
              if (descIdx !== -1) {
                description = tag.slice(descIdx + 2).trim();
                tag = tag.slice(0, descIdx).trim();
              }
              let type, params = {}, defaultValue = rawValue;
              if (tag.startsWith('@number')) {
                type = 'number';
                const numMatch = tag.match(/@number\s+(-?\d+(?:\.\d+)?)(?:\s+|\s*to\s*)(-?\d+(?:\.\d+)?)/);
                if (numMatch) {
                  params.min = parseFloat(numMatch[1]);
                  params.max = parseFloat(numMatch[2]);
                }
                defaultValue = parseFloat(rawValue);
              } else if (tag.startsWith('@check')) {
                type = 'check';
                defaultValue = (rawValue == '1' || rawValue.toLowerCase() == 'true');
              } else if (tag.startsWith('@selction')) {
                type = 'selection';
                const selMatch = tag.match(/@selction\s+([\d, ]+)/);
                if (selMatch) {
                  params.options = selMatch[1].split(',').map(s => s.trim()).filter(Boolean);
                }
                defaultValue = rawValue;
              } else if (tag.startsWith('@text')) {
                type = 'text';
                const textMatch = tag.match(/@text\s+(\d+)(?:\s+max\s*(\d+))?/);
                if (textMatch) {
                  params.rows = parseInt(textMatch[1]);
                  if (textMatch[2]) params.max = parseInt(textMatch[2]);
                }
                defaultValue = rawValue;
              } else {
                continue; // skip unknown tags
              }
              configVars.push({ name, type, defaultValue, params, description });
            }
            return configVars;
          }

          function renderConfiguratorForm(configVars) {
            if (!Array.isArray(configVars) || configVars.length === 0) {
              return `<div style="color:#aaa; padding:2em;">
                <div style="font-size:1.1em; font-weight:600; color:#ff0000; margin-bottom:10px;">No configurable variables found in GGcode.</div>
                <div style="margin-top:10px; color:#ccc; font-size:0.98em;">
                  <p>
                    <strong>How to add Configurator support:</strong>
                  </p>
                  <ul style="margin-left:1.2em; padding-left:0;">
                    <li>
                      Add <code>/// @number min max</code> after a <code>let</code> variable to create a number input.<br>
                      Example: <code>let width = 10 /// @number 1 100 // Part width in mm</code>
                    </li>
                    <li>
                      Add <code>/// @check</code> for a checkbox (boolean).<br>
                      Example: <code>let enabled = 1 /// @check // Enable feature</code>
                    </li>
                    <li>
                      Add <code>/// @selction 1,2,3</code> for a dropdown with options.<br>
                      Example: <code>let mode = 2 /// @selction 1,2,3 // Select mode</code>
                    </li>
                    <li>
                      Add <code>/// @text rows [max N]</code> for a text input or textarea.<br>
                      Example: <code>let notes = "" /// @text 3 max 120 // Notes for operator</code>
                    </li>
                    <li>
                      To add a field title/description, append <code>// Title here</code> at the end of the line.
                    </li>
                  </ul>
                  <div style="margin-top:8px; color:#aaa; font-size:0.93em;">
                    Example:<br>
                    <code>let speed = 1200 /// @number 500 3000 // Spindle speed (RPM)</code>
                  </div>
                  <div style="margin-top:14px; color:#b0b0b0; font-size:0.97em;">
                    <strong>How to use the Configurator:</strong><br>
                    When you add variables with configurator tags, they will appear here for easy editing.<br>
                  </div>
                </div>
              </div>`;
            }
            let html = `
    <div style="background:#23272e; box-shadow:0 2px 16px #0002; padding:18px 18px 8px 18px; max-width:38vw; margin:0 auto;">
      <div style="font-size:1.1em; font-weight:600; color:#fff; margin-bottom:10px;">Configurator</div>
      <div style="color:#ccc; font-size:0.98em; margin-bottom:12px;">
        <ul style="margin:0 0 0 1.2em; padding:0; list-style:disc;">
          <li>Edit variables below before compiling.</li>
          <li>Numbers: range-limited. Checks: on/off. Select: preset options. Text: custom input.</li>
        </ul>
        <div style="margin-top:6px; color:#aaa; font-size:0.93em;">
          <div>
            <strong>Press <span style="color:#fff;">Save</span></strong> to save your changes and apply them to the GGcode source.<br>
            Or just press <strong><span style="color:#fff;">Compile</span></strong> to test the results only, without updating your main GGcode.
          </div>
        </div>
      </div>


    <form id="configuratorForm" style="display:flex; flex-direction:column; gap:16px;">`;
            for (const v of configVars) {
              html += `<div style="display:flex; align-items:center; gap:8px; padding:4px 0;">`;
              html += `<label style="color:#e0e0e0; font-weight:500; font-size:0.9em; min-width:80px; text-align:right;">${v.name}:</label>`;
              if (v.type === 'number') {
                let numberInputHtml = `<input type="number" title="${v.description}" name="${v.name}" value="${v.defaultValue}" min="${v.params.min ?? ''}" max="${v.params.max ?? ''}" style="margin-left:0; width:140px; padding:6px 8px; border-radius:4px; border:1px solid #444; background:#181b20; color:#fff; font-size:0.9em; transition:border 0.2s; outline:none;" onfocus="this.style.borderColor='#0074D9'" onblur="this.style.borderColor='#444'; if(this.value !== '' && !isNaN(this.value)) { this.value = Math.max(this.min, Math.min(this.max, this.value)); }">`;
                let minMaxHtml = '';
                if (v.params.min !== undefined && v.params.max !== undefined) {
                  minMaxHtml = ` <span style="color:#ffb347; font-size:0.85em; margin-left:6px;">[${v.params.min}-${v.params.max}]</span>`;
                }
                html += `<div style="display:flex; align-items:center; gap:6px; flex:1;">${numberInputHtml}${minMaxHtml}</div>`;
              } else if (v.type === 'check') {
                html += `<div style="display:flex; align-items:center; gap:6px; flex:1;"><input title="${v.description}" type="checkbox" name="${v.name}" ${v.defaultValue ? 'checked' : ''} style="margin-left:0; width:18px; height:18px; accent-color:#0074D9;"></div>`;
              } else if (v.type === 'selection') {
                html += `<div style="display:flex; align-items:center; gap:6px; flex:1;"><select title="${v.description}" name="${v.name}" style="margin-left:0; width:160px; padding:6px 8px; border-radius:4px; border:1px solid #444; background:#181b20; color:#fff; font-size:0.9em; transition:border 0.2s; outline:none;" onfocus="this.style.borderColor='#0074D9'" onblur="this.style.borderColor='#444'">`;
                for (const opt of v.params.options || []) {
                  html += `<option value="${opt}"${opt == v.defaultValue ? ' selected' : ''}>${opt}</option>`;
                }
                html += `</select></div>`;
              } else if (v.type === 'text') {
                if (v.params.rows && v.params.rows > 1) {
                  html += `<div style="display:flex; align-items:flex-start; gap:6px; flex:1;"><textarea title="${v.description}" name="${v.name}" rows="${v.params.rows}" maxlength="${v.params.max ?? ''}" style="margin-left:0; width:100%; min-width:160px; max-width:100%; padding:6px 8px; border-radius:4px; border:1px solid #444; background:#181b20; color:#fff; font-size:0.9em; transition:border 0.2s; outline:none; resize:vertical;" onfocus="this.style.borderColor='#0074D9'" onblur="this.style.borderColor='#444'">${v.defaultValue}</textarea></div>`;
                } else {
                  html += `<div style="display:flex; align-items:center; gap:6px; flex:1;"><input type="text" title="${v.description}" name="${v.name}" value="${v.defaultValue}" maxlength="${v.params.max ?? ''}" style="margin-left:0; width:100%; min-width:160px; max-width:100%; padding:6px 8px; border-radius:4px; border:1px solid #444; background:#181b20; color:#fff; font-size:0.9em; transition:border 0.2s; outline:none;" onfocus="this.style.borderColor='#0074D9'" onblur="this.style.borderColor='#444'">`;
                  if (v.params.max) html += ` <span style="color:#888; font-size:0.85em;">[max ${v.params.max}]</span>`;
                  html += `</div>`;
                }
              }

              html += `</div>`;
            }
            html += '</form>';
            html += '<hr style="border: none; border-top: 1px solid #333; margin: 18px 0 8px 0;">';
            html += '</div>';
            return html;
          }



          function validateConfiguratorForm(form) {
            let valid = true;
            const numberInputs = form.querySelectorAll('input[type=number]');
            numberInputs.forEach(input => {
              const min = input.min !== '' ? parseFloat(input.min) : -Infinity;
              const max = input.max !== '' ? parseFloat(input.max) : Infinity;
              const val = parseFloat(input.value);
              if (isNaN(val) || val < min || val > max) {
                input.style.border = '2px solid red';
                valid = false;
              } else {
                input.style.border = '';
              }
            });
            return valid;
          }

          function showConfigurator() {
            const modal = document.getElementById('configuratorModal');
            const inerModal = document.getElementById('configuratorContent');
            if (!modal) return;
            // get GGcode from the main editor (same as compile)
            let ggcode = '';

            if (typeof editor !== 'undefined' && typeof editor.getValue === 'function') {
              ggcode = editor.getValue();
            } else if (window.editor && typeof window.editor.getValue === 'function') {
              ggcode = window.editor.getValue();
            } else {
              const ta = document.getElementById('ggcode');
              if (ta) ggcode = ta.value;
            }


            const configVars = parseConfiguratorVars(ggcode);

            inerModal.innerHTML = renderConfiguratorForm(configVars);

            modal.style.display = 'flex';
          }

          function closeConfigurator() {
            document.getElementById('configuratorModal').style.display = 'none';
          }

          // --- Helper to read form values ---
          function getConfiguratorFormValues() {
            const form = document.getElementById('configuratorForm');
            if (!form) return {};
            const values = {};
            for (const el of form.elements) {
              if (!el.name) continue;
              if (el.type === 'checkbox') {
                values[el.name] = el.checked ? 1 : 0;
              } else {
                values[el.name] = el.value;
              }
            }
            return values;
          }

          // --- Save & Compile ---
          function configuratorSaveAndCompile() {
            let code = '';
            if (typeof editor !== 'undefined' && typeof editor.getValue === 'function') {
              code = editor.getValue();
            } else if (window.editor && typeof window.editor.getValue === 'function') {
              code = window.editor.getValue();
            } else {
              const ta = document.getElementById('ggcode');
              if (ta) code = ta.value;
            }
            const values = getConfiguratorFormValues();
            console.log('[Configurator] Saving values from form:', values);
            // Replace let ... = ... /// ... lines with new values
            const lines = code.split(/\r?\n/);
            let foundVars = {};
            const newLines = lines.map(line => {
              const match = line.match(/^\s*let\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*([^/]+)(\/\/\/)/);
              if (!match) return line;
              const name = match[1];
              if (values.hasOwnProperty(name)) {
                foundVars[name] = true;
                // Replace value, keep tag and description
                const newLine = line.replace(/(let\s+[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*)([^/]+)(\/\/\/)/, function (_, p1, p2, p3) {
                  return p1 + values[name] + ' ' + p3;
                });
                console.log(`[Configurator] Updated line for '${name}':`, newLine);
                return newLine;
              }
              return line;
            });
            // Log any variables not found in code
            Object.keys(values).forEach(name => {
              if (!foundVars[name]) {
                console.warn(`[Configurator] No matching let line found for variable '${name}'`);
              }
            });
            const newCode = newLines.join('\n');
            console.log('[Configurator] Old code:', code);
            console.log('[Configurator] New code:', newCode);
            // Update editor
            if (typeof editor !== 'undefined' && typeof editor.setValue === 'function') {
              editor.setValue(newCode);
              console.log('[Configurator] Editor updated with new values.');
            } else if (window.editor && typeof window.editor.setValue === 'function') {
              window.editor.setValue(newCode);
              console.log('[Configurator] Editor updated with new values.');
            } else {
              const ta = document.getElementById('ggcode');
              if (ta) ta.value = newCode;
              console.log('[Configurator] Textarea updated with new values.');
            }
            // Optionally close modal
            document.getElementById('configuratorModal').style.display = 'none';
            // Trigger compile (simulate clicking Compile button)
            if (typeof compileGGcode === 'function') {
              compileGGcode();
            } else if (typeof window.compileGGcode === 'function') {
              window.compileGGcode();
            } else {
              // Try to find and click the Compile button
              const btn = document.querySelector('button[title="Compile GGcode"]');
              if (btn) btn.click();
            }
          }

          // --- Compile Only ---
          async function configuratorCompileOnly() {
            console.log('configuratorCompileOnly');
            let code = '';
            if (typeof editor !== 'undefined' && typeof editor.getValue === 'function') {
              code = editor.getValue();
            } else if (window.editor && typeof window.editor.getValue === 'function') {
              code = window.editor.getValue();
            } else {
              const ta = document.getElementById('ggcode');
              if (ta) code = ta.value;
            }
            const values = getConfiguratorFormValues();
            // Replace let ... = ... /// ... lines with new values (in memory only)
            const lines = code.split(/\r?\n/);
            const newLines = lines.map(line => {
              const match = line.match(/^\s*let\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*([^/]+)(\/\/\/)/);
              if (!match) return line;
              const name = match[1];
              if (values.hasOwnProperty(name)) {
                return line.replace(/(let\s+[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*)([^/]+)(\/\/\/)/, function (_, p1, p2, p3) {
                  return p1 + values[name] + ' ' + p3;
                });
              }
              return line;
            });
            const tempCode = newLines.join('\n');
            // Compile tempCode by sending to /api/compile, just like submitGGcode
            if (window.outputEditor && typeof window.outputEditor.setValue === 'function') {
              window.outputEditor.setValue('Compiling...');
            }
            try {
              const response = await fetch('/api/compile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ggcode: tempCode })
              });
              const result = await response.json();
              if (result.success) {
                if (window.outputEditor && typeof window.outputEditor.setValue === 'function') {
                  window.outputEditor.setValue(result.output);
                }
              } else {
                if (window.outputEditor && typeof window.outputEditor.setValue === 'function') {
                  window.outputEditor.setValue('Error: ' + result.error);
                }
              }
            } catch (err) {
              if (window.outputEditor && typeof window.outputEditor.setValue === 'function') {
                window.outputEditor.setValue('Network error: ' + err.message);
              }
            }
            // Do NOT close the modal!
          }





        </script>



<script>
  const container = document.getElementById('annotations-container');
  const panel = document.getElementById('annotations');
  const toggle = document.getElementById('ann-toggle');

  function setCollapsed(c) {
    container.classList.toggle('collapsed', c);  // for arrow rotation
    panel.classList.toggle('is-collapsed', c);   // for 1-line height
    toggle.setAttribute('aria-expanded', String(!c));
  }

  toggle.addEventListener('click', () => {
    setCollapsed(!container.classList.contains('collapsed'));
  });

  // start expanded
  setCollapsed(false);
</script>



</body>

</html>