<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>GGcode Compiler</title>
  <link rel="stylesheet" href="/style.css">
  <style>
    html, body {
      height: 100%;
      min-height: 0;
      overflow: hidden;
      padding: 0px 0px;
      margin: 0px 0px;
    }

    #ggform {
      height: 100%;
      min-height: 0;
      display: flex;
      flex-direction: column;
      
    }

    .main-content {
      flex: 1 1 0%;
      display: flex;
      min-height: 0;
    }

    .left-panel,
    .right-panel {
      flex: 1 1 0%;
      min-width: 0;
      min-height: 0;
      height: 100%;
      position: relative;
      overflow: hidden;
    }

    #editor, #output {
      min-height: 0;
      min-width: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }

    .right-panel {
        display: flex;
        flex-direction: column;
        height: 100%;
        position: relative;
    }
    .gcode-header {
        flex: 0 0 auto;
        position: static;
        width: 100%;
        z-index: 1;
    }
    #output {
        flex: 1 1 auto;
        position: static;
        min-height: 0;
        min-width: 0;
        width: 100%;
        height: 100%;
    }


        .control-bar {
            background: #252526;
            border-top: 1px solid #3c3c3c;
            padding: 10px 16px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .control-bar button {
            background: transparent;
            color: #cccccc;
            border: none;
            padding: 6px 12px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 400;
            transition: background-color 0.1s ease;
            display: flex;
            align-items: center;
            gap: 6px;
            min-width: 70px;
            justify-content: center;
        }

        .control-bar button:hover {
            background: #2a2d2e;
            color: #ffffff;
        }

        .control-bar button:active {
            background: #37373d;
        }

        .control-bar button.primary {
            color: #007acc;
        }

        .control-bar button.primary:hover {
            background: #094771;
            color: #ffffff;
        }

        .control-bar button.danger {
            color: #f48771;
        }

        .control-bar button.danger:hover {
            background: #5a1d1d;
            color: #ffffff;
        }

        .control-bar button.success {
            color: #89d185;
        }

        .control-bar button.success:hover {
            background: #1e4a1e;
            color: #ffffff;
        }

        .control-bar .toggle-container {
            display: flex;
            align-items: center;
            gap: 6px;
            color: #cccccc;
            font-size: 16px;
            font-weight: 400;
        }

        .control-bar .toggle-container input[type="checkbox"] {
            width: 16px;
            height: 16px;
            accent-color: #007acc;
            margin: 0;
        }

        .control-bar .separator {
            width: 1px;
            height: 20px;
            background: #3c3c3c;
            margin: 0 6px;
        }

        .control-bar .spacer {
            flex: 1;
        }

        .control-bar .button-group {
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .control-bar .group-label {
            color: #8c8c8c;
            font-size: 16px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-right: 4px;
        }

        .control-left,
        .control-right {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .control-right {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 8px;
            width: 100%;
            position: relative;
        }
        .control-right .gcode-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .control-right .utility-group {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-left: auto;
        }

        .control-right .button-group,
        .control-right .separator,
        .control-right .toggle-container,
        .control-right button {
            margin-left: 0;
            margin-right: 0;
        }

            .gcode-header {
        background: #252526;
        border-bottom: 1px solid #3c3c3c;
        padding: 8px 12px;
        display: flex;
        align-items: center;
        gap: 12px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        position: static; /* Remove absolute */
        width: 100%;
        z-index: 1;
    }

        .gcode-title {
            color: #cccccc;
            font-size: 12px;
            font-weight: 500;
            margin-right: auto;
        }

        .gcode-header button {
            background: transparent;
            color: #cccccc;
            border: none;
            padding: 4px 8px;
            border-radius: 2px;
            cursor: pointer;
            font-size: 11px;
            font-weight: 400;
            transition: background-color 0.1s ease;
        }

        .gcode-header button:hover {
            background: #2a2d2e;
            color: #ffffff;
        }

        .gcode-header button:last-child {
            color: #365235;
        }

        .gcode-header button:last-child:hover {
            background: #1e4a1e;
            color: #ffffff;
        }
  </style>
</head>
<body>

  <form id="ggform" action="/compile" method="POST" onsubmit="return submitGGcode(event)">
    <!-- Editor and Output -->
    <div class="main-content">
      <div class="left-panel"><div id="editor"></div></div>
      <div class="right-panel">
        <div id="output"></div>
      </div>
    </div>

    <textarea name="ggcode" id="ggcode" style="display:none;"><%= input %></textarea>

    <!-- Bottom Control Bar -->
    <div class="control-bar">
      <div class="control-left">



        <div class="separator"></div>
        <div class="button-group">
          <span class="group-label">GG-code</span>



          <button type="submit" class="primary" title="Compile GGcode">
            <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">
              <path d="M2.5 1.5L8.5 6L2.5 10.5V1.5Z"/>
            </svg>
            Compile
          </button>


          <button type="button" id="openGGcodeBtn" title="Open GGcode file">
            <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">
              <path d="M2 2V10H10V4H6V2H2ZM6 2V4H10L6 2ZM1 1V11H11V3L7 1H1Z"/>
            </svg>
            Open
          </button>
          <button type="button" onclick="saveGGcode()" class="success" title="Save GGcode input to file">
            <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">
              <path d="M2 2V10H10V4H6V2H2ZM6 2V4H10L6 2ZM1 1V11H11V3L7 1H1Z"/>
            </svg>
            Save
          </button>
        </div>
      </div>
      <div class="control-right">
        <div class="gcode-group">
          <div class="separator"></div>
          <span class="group-label">G-code</span>
          <button type="button" onclick="copyOutput()" title="Copy output G-code">
            <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">
              <path d="M4 2H2C1.45 2 1 2.45 1 3V9C1 9.55 1.45 10 2 10H6C6.55 10 7 9.55 7 9V7H5V9H2V3H4V2ZM8 2H6V3H8V2ZM10 4H8V5H10V4ZM8 6H10V7H8V6ZM6 4H8V5H6V4ZM8 6H6V7H8V6ZM10 8H8V9H10V8ZM8 10H10V11H8V10ZM6 8H8V9H6V8ZM8 10H6V11H8V10Z"/>
            </svg>
            Copy
          </button>
          <button type="button" onclick="saveOutput()" class="success" title="Save output G-code to file">
            <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">
              <path d="M6 1L10 5H8V9H4V5H2L6 1ZM1 10V11H11V10H1Z"/>
            </svg>
            Export
          </button>
        </div>
        <div class="utility-group">
          <button type="button" onclick="clearMemory()" class="danger" title="Clear saved content and settings">
            <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">
              <path d="M4.5 2.5L4 3L7.5 6.5L11 3L10.5 2.5L7.5 5.5L4.5 2.5ZM2 2V10H10V2H2ZM1 1V11H11V1H1Z"/>
            </svg>
            Clear
          </button>
          <div class="separator"></div>
          <div class="toggle-container">
            <input type="checkbox" id="autoCompileCheckbox" />
            <label for="autoCompileCheckbox">Auto</label>
          </div>
        </div>
      </div>
      <input type="file" id="ggcodeFileInput" accept=".ggcode,.txt" style="display:none;" />
    </div>
  </form>

  <!-- Monaco loader -->




  <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs/loader.js"></script>
  <script>
    let editor, outputEditor;
    let monacoReady = false;
    let autoCompile = false;
    let autoCompileTimeout = null;
    let lastOpenedFilename = '';
    
    // Load saved filename on page load
    document.addEventListener('DOMContentLoaded', function() {
      const savedFilename = localStorage.getItem('ggcode_last_filename');
      if (savedFilename) {
        lastOpenedFilename = savedFilename;
      }
    });
    
    // Save content periodically and on page unload
    function saveContent() {
      if (editor) {
        localStorage.setItem('ggcode_input_content', editor.getValue());
      }
      if (outputEditor) {
        localStorage.setItem('ggcode_output_content', outputEditor.getValue());
      }
    }
    
    // Auto-save content every 30 seconds
    setInterval(saveContent, 30000);
    
    // Save content when page is about to unload
    window.addEventListener('beforeunload', saveContent);

    require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs' } });

    require(['vs/editor/editor.main'], function () {




monaco.languages.register({ id: 'ggcode' });

monaco.editor.defineTheme('ggcode-dark', {
  base: 'vs-dark',
  inherit: true,
  rules: [
    { token: 'keyword', foreground: '6FBAE3' },
    { token: 'gcode', foreground: '#F21B3F' },
    { token: 'axis', foreground: 'ff66cc' },
    { token: 'number', foreground: 'D0ECB1' },
    { token: 'comment', foreground: '#577834', fontStyle: 'italic' },
    { token: 'variable', foreground: 'ffaa00' },
    { token: 'constant', foreground: '00ff99' },
    { token: 'predefined', foreground: 'ff66cc' },
    { token: 'identifier', foreground: '#F5F5F5' },

  // Custom axis colors
    // Axis color-coded per CNC convention
{ token: 'axis.x', foreground: '#D9372B' },   // Soft red
{ token: 'axis.y', foreground: '#57C24F' },   // Soft green

{ token: 'axis.z', foreground: '#3B65B8' },   // Soft blue

{ token: 'axis.a', foreground: 'ff99ff' },   // Soft magenta
{ token: 'axis.b', foreground: '99ffff' },   // Soft cyan
{ token: 'axis.c', foreground: 'ffff99' },   // Soft yellow
{ token: 'axis.e', foreground: 'ffdddd' },   // Soft light red
{ token: 'axis.f', foreground: 'aaaaaa' },   // Soft gray
{ token: 'axis.s', foreground: 'ffbb66' },   // Soft orange
{ token: 'axis.t', foreground: 'dddddd' },   // Soft white
{ token: 'axis.h', foreground: 'bbbbff' },   // Soft light blue
{ token: 'axis.r', foreground: 'aaffaa' },   // Soft light green
{ token: 'axis.p', foreground: 'bbffff' },   // Soft pale cyan

{ token: 'axis.t', foreground: '#B02BD9' },   // Soft pale cyan

{ token: 'nline', foreground: '#5C5C5C' },   // Soft pale cyan

  ],
  colors: {} // ✅ Add this line to prevent the crash
});



monaco.languages.setMonarchTokensProvider('ggcode', {
  keywords: ['let', 'if', 'else', 'for', 'while', 'function', 'return', 'note'],
  constants: ['PI', 'E', 'TAU', 'DEG_TO_RAD'],
  builtins: ['abs', 'mod', 'sin', 'cos', 'tan', 'sqrt', 'hypot', 'floor', 'ceil', 'round', 'clamp', 'distance'],

  operators: ['=', '+', '-', '*', '/', '%', '..'],
  symbols: /[=><!~?:&|+\-*\/\^%]+/,

  tokenizer: {
    root: [





// Axis with values (each treated separately)





// Axis with bracketed variables (e.g., X[f], Y[y+1])
[/\bX\[[^\]]+\]/, 'axis.x'],
[/\bY\[[^\]]+\]/, 'axis.y'],
[/\bZ\[[^\]]+\]/, 'axis.z'],
[/\bA\[[^\]]+\]/, 'axis.a'],
[/\bB\[[^\]]+\]/, 'axis.b'],
[/\bC\[[^\]]+\]/, 'axis.c'],
[/\bE\[[^\]]+\]/, 'axis.e'],
[/\bF\[[^\]]+\]/, 'axis.f'],
[/\bS\[[^\]]+\]/, 'axis.s'],
[/\bT\[[^\]]+\]/, 'axis.t'],
[/\bH\[[^\]]+\]/, 'axis.h'],
[/\bR\[[^\]]+\]/, 'axis.r'],
[/\bP\[[^\]]+\]/, 'axis.p'],

[/\bP\[[^\]]+\]/, 'axis.t'],



[/\bX[+-]?[0-9.]+\b/, 'axis.x'],
[/\bY[+-]?[0-9.]+\b/, 'axis.y'],
[/\bZ[+-]?[0-9.]+\b/, 'axis.z'],
[/\bA[+-]?[0-9.]+\b/, 'axis.a'],
[/\bB[+-]?[0-9.]+\b/, 'axis.b'],
[/\bC[+-]?[0-9.]+\b/, 'axis.c'],
[/\bE[+-]?[0-9.]+\b/, 'axis.e'],  // NEW
[/\bF[+-]?[0-9.]+\b/, 'axis.f'],
[/\bS[+-]?[0-9.]+\b/, 'axis.s'],
[/\bT[+-]?[0-9.]+\b/, 'axis.t'],
[/\bH[+-]?[0-9.]+\b/, 'axis.h'],
[/\bR[+-]?[0-9.]+\b/, 'axis.r'],
[/\bP[+-]?[0-9.]+\b/, 'axis.p'],

[/\bP[+-]?[0-9.]+\b/, 'axis.t'],

[/\bN[+-]?[0-9.]+\b/, 'nline'],

      // Keywords
      [/\b(let|if|else|for|while|function|return|note)\b/, 'keyword'],
      
      // Built-in constants
      [/\b(PI|E|TAU|DEG_TO_RAD)\b/, 'constant'],

      // Built-in functions
      [/\b(abs|mod|sin|cos|tan|sqrt|hypot|floor|ceil|round|clamp|distance)\b/, 'predefined'],

      // G-code / M-code
      [/\b(G\d+|M\d+)\b/, 'gcode'],

      // Axis with numeric values (X10, Y-5.5, etc.)
      [/\b([XYZABC][+-]?[0-9.]+)\b/, 'axis'],
      [/\b([FSTHRP][+-]?[0-9.]+)\b/, 'axis'],

      // Variables in brackets like [x], [x+1]
      [/\[[^\]]+\]/, 'variable'],

      // Numbers
      [/\b\d+(\.\d+)?\b/, 'number'],

      // Line comments
      [/\/\/.*$/, 'comment'],

      // Parenthesis-style G-code comments ( )
     // [/\([^)]*\)/, 'comment'],

      // Multiline comments /% ... %/
      [/%\/.*$/, 'comment', '@blockComment'],

      // Brackets and symbols
      [/[{}\[\]()]/, '@brackets'],





[/[a-zA-Z_]\w*/, {
  cases: {
    '@keywords': 'keyword',
    '@constants': 'constant',
    '@builtins': 'predefined',
    '@default': 'identifier'   // 🟡 highlight user-defined vars here
  }
}],







    ],

    blockComment: [
      [/.*%\//, 'comment', '@pop'],
      [/.*$/, 'comment']
    ]
  }
});
















      // Load saved content or use server-provided content
      let initialInput = `<%- input.replace(/`/g, '\`') %>`;
      let initialOutput = `<%- typeof output !== 'undefined' && output ? output.replace(/`/g, '\`') : '' %>`;
      
      // Check for saved content in localStorage
      const savedInput = localStorage.getItem('ggcode_input_content');
      const savedOutput = localStorage.getItem('ggcode_output_content');
      
      if (savedInput && savedInput.trim() !== '') {
        initialInput = savedInput;
      }
      if (savedOutput && savedOutput.trim() !== '') {
        initialOutput = savedOutput;
      }

      editor = monaco.editor.create(document.getElementById('editor'), {
        value: initialInput,
        language: 'ggcode',
        theme: 'ggcode-dark',
        automaticLayout: true,
        minimap: { enabled: true }
      });

      outputEditor = monaco.editor.create(document.getElementById('output'), {
        value: initialOutput,
        language: 'ggcode',
        theme: 'ggcode-dark',
        automaticLayout: true,
        minimap: { enabled: true }
      });
      monacoReady = true;

      // Auto-compile logic
      let skipAutoCompile = false;
      editor.onDidChangeModelContent(() => {
        if (autoCompile && !skipAutoCompile) {
          if (autoCompileTimeout) clearTimeout(autoCompileTimeout);
          autoCompileTimeout = setTimeout(() => {
            submitGGcode(new Event('submit'));
          }, 1000);
        }
        skipAutoCompile = false; // Reset flag after handling
      });

      // Drag-and-drop file support for editor
      const editorDom = document.getElementById('editor');
      if (editorDom) {
        editorDom.addEventListener('dragover', function(e) {
          e.preventDefault();
          editorDom.style.background = '#222a';
        });
        editorDom.addEventListener('dragleave', function(e) {
          e.preventDefault();
          editorDom.style.background = '';
        });
        editorDom.addEventListener('drop', function(e) {
          e.preventDefault();
          editorDom.style.background = '';
          if (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length > 0) {
            const file = e.dataTransfer.files[0];
            const reader = new FileReader();
            reader.onload = function(evt) {
              skipAutoCompile = true; // Skip auto-compile for file load
              if (editor) editor.setValue(evt.target.result);
              // Remember filename
              lastOpenedFilename = file.name || '';
              localStorage.setItem('ggcode_last_filename', lastOpenedFilename);
              // Direct compilation after file load
              submitGGcode(new Event('submit'));
            };
            reader.readAsText(file);
          }
        });
      }
    });

    // Auto-compile checkbox logic
    document.addEventListener('DOMContentLoaded', function() {
      const autoCheckbox = document.getElementById('autoCompileCheckbox');
      if (autoCheckbox) {
        // Load saved auto-compile state
        const savedAutoCompile = localStorage.getItem('ggcode_auto_compile');
        if (savedAutoCompile !== null) {
          autoCompile = savedAutoCompile === 'true';
          autoCheckbox.checked = autoCompile;
        }
        
        autoCheckbox.addEventListener('change', function() {
          autoCompile = autoCheckbox.checked;
          // Save auto-compile state to localStorage
          localStorage.setItem('ggcode_auto_compile', autoCompile.toString());
        });
      }
    });

    // Open GGcode file logic
    document.addEventListener('DOMContentLoaded', function() {
      const openBtn = document.getElementById('openGGcodeBtn');
      const fileInput = document.getElementById('ggcodeFileInput');
      if (openBtn && fileInput) {
        openBtn.addEventListener('click', function() {
          fileInput.value = '';
          fileInput.click();
        });
        fileInput.addEventListener('change', function(e) {
          const file = e.target.files[0];
          if (!file) return;
          const reader = new FileReader();
          reader.onload = function(evt) {
            skipAutoCompile = true; // Skip auto-compile for file load
            if (editor) editor.setValue(evt.target.result);
            // Remember filename
            lastOpenedFilename = file.name || '';
            localStorage.setItem('ggcode_last_filename', lastOpenedFilename);
            // Direct compilation after file load
            submitGGcode(new Event('submit'));
          };
          reader.readAsText(file);
        });
      }
    });

    function syncEditors() {
      document.getElementById('ggcode').value = editor.getValue();
    }

    async function submitGGcode(event) {
      event.preventDefault();
      if (!monacoReady) {
        alert("Editor is still loading. Please wait a moment and try again.");
        return false;
      }
      syncEditors();
      const code = editor.getValue();
      if (outputEditor) {
        outputEditor.setValue('Compiling...');
      }
      try {
        const response = await fetch('/api/compile', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ggcode: code })
        });
        const result = await response.json();
        if (result.success) {
          if (outputEditor) outputEditor.setValue(result.output);
          // Save content after successful compilation
          saveContent();
        } else {
          if (outputEditor) outputEditor.setValue('Error: ' + result.error);
        }
      } catch (err) {
        if (outputEditor) outputEditor.setValue('Network error: ' + err.message);
      }
      return false;
    }

    function copyOutput() {
      if (outputEditor) {
        navigator.clipboard.writeText(outputEditor.getValue())
          .catch(err => alert("Failed to copy: " + err));
      }
    }

    function saveOutput() {
      if (outputEditor) {
        const blob = new Blob([outputEditor.getValue()], { type: 'text/plain' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        // Improved filename logic for output
        let filename = '';
        if (lastOpenedFilename) {
          let base = lastOpenedFilename;
          if (base.endsWith('.gcode') || base.endsWith('.ggcode')) {
            base = base.replace(/\.(gcode|ggcode)$/i, '');
          } else if (base.lastIndexOf('.') > 0) {
            base = base.slice(0, base.lastIndexOf('.'));
          }
          filename = base + '.g.gcode';
        }
        if (!filename) filename = 'output.g.gcode';
        // Prompt user for filename
        const userFilename = window.prompt('Save G-code as:', filename);
        if (!userFilename) return; // Cancelled
        a.download = userFilename;
        a.click();
      }
    }

    function saveGGcode() {
      const blob = new Blob([editor.getValue()], { type: 'text/plain' });
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      let filename = lastOpenedFilename && lastOpenedFilename.endsWith('.ggcode') ? lastOpenedFilename : '';
      if (!filename && lastOpenedFilename) {
        // If opened file has another extension, use its base name with .ggcode
        const dot = lastOpenedFilename.lastIndexOf('.');
        filename = (dot > 0 ? lastOpenedFilename.slice(0, dot) : lastOpenedFilename) + '.ggcode';
      }
      if (!filename) filename = 'input.ggcode';
      // Prompt user for filename
      const userFilename = window.prompt('Save GGcode as:', filename);
      if (!userFilename) return; // Cancelled
      a.download = userFilename;
      a.click();
    }
    
    function clearMemory() {
      if (confirm('This will clear all saved content and settings. Are you sure?')) {
        // Clear localStorage
        localStorage.removeItem('ggcode_input_content');
        localStorage.removeItem('ggcode_output_content');
        localStorage.removeItem('ggcode_last_filename');
        localStorage.removeItem('ggcode_auto_compile');
        
        // Reset variables
        lastOpenedFilename = '';
        autoCompile = false;
        
        // Reset UI
        const autoCheckbox = document.getElementById('autoCompileCheckbox');
        if (autoCheckbox) {
          autoCheckbox.checked = false;
        }
        
        // Clear editors
        if (editor) {
          editor.setValue('');
        }
        if (outputEditor) {
          outputEditor.setValue('');
        }
        
        alert('Memory cleared successfully!');
      }
    }
  </script>



</body>
</html>
